(page "chapter1-2-2.html")

;; Exercise 1.14

(defn first-denomination [kinds-of-coins]
  (case kinds-of-coins
    1 1
    2 5
    3 10
    4 25
    5 50))

(defn cc [amount kinds-of-coins]
  (cond
    (= amount 0) 1
    (or (< amount 0) (= kinds-of-coins 0)) 0
    :else (+ (cc amount (dec kinds-of-coins))
             (cc (- amount
                    (first-denomination kinds-of-coins))
                 kinds-of-coins))))

(defc cc-100-5 (cc 100 5))


;; Exercise 1.15

(defn cube [x] (* x x x))

(defn p' [x]
  (do
    (println "applying p'")
    (- (* 3 x) (* 4 (cube x)))))

(defn abs [n] (max n (- n)))

(defn sine [angle]
  (if (not (> (abs angle) 0.1))
    angle
    (p' (sine (/ angle 3.0)))))

(defc sine-12-15 (sine 12.15))

(html
  (head
    (link :rel "stylesheet" :href "app.css"))
  (body
    (h1 "Exercise 1.14")
    (ul
      (li (text "count-change 100-cents 5-coins:"))
      (li (pre (code "(cc 100 5)")))
      (li (pre (code "
(+ (cc 100 4) 
   (cc 50 5))")))
      (li (pre (code "
(+ (+ (cc 100 3) (cc 75 4)) 
   (+ (cc 50 4) (cc 0 5)))")))
      (li (pre (code "
(+ (+ 21 19 17 15 13 11 9 7 5 3 1
      (+ (cc 75 3) (cc 50 4))) 
   (+ (+ (cc 50 3) (cc 25 4)) 1))")))
      (li (pre (code "
(+ (+ 21 19 17 15 13 11 9 7 5 3 1
      (+ (+ 16 14 12 10 8 6 4 2 0)
         (+ (cc 50 3) (cc 25 4)))) 
   (+ (+ (+ 11 9 7 5 3 1)
         (+ (cc 25 3) (cc 0 4))) 1))")))
      (li (pre (code "
(+ (+ 21 19 17 15 13 11 9 7 5 3 1
      (+ (+ 16 14 12 10 8 6 4 2 0)
         (+ (+ 11 9 7 5 3 1)
            (+ (cc 25 3) (cc 0 4))))) 
   (+ (+ (+ 11 9 7 5 3 1)
         (+ (+ 6 4 2 0) 1)) 1))")))
      (li (pre (code "
(+ (+ 21 19 17 15 13 11 9 7 5 3 1
      (+ (+ 16 14 12 10 8 6 4 2 0)
         (+ (+ 11 9 7 5 3 1)
            (+ (+ 6 4 2 0) 1)))) 
   (+ (+ (+ 11 9 7 5 3 1)
         (+ (+ 6 4 2 0) 1)) 1))")))
      (li (pre (code "
(cc 100 5) = ")) (text "~{cc-100-5}")))
    (h1 "Exercise 1.15")
    (ul
      (li
        (pre (code "
(sine 12.15) ;; => ")) (text "~{sine-12-15} ... console logs \"applying p'\" 5 times")))))
