(page "chapter1-2.html")

;; Exercise 1.10
(defn ack [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        :else (ack (- x 1)
                   (ack x (- y 1)))))

(def a-1-10 (cell (ack 1 10)))
(def a-2-4 (cell (ack 2 4)))
(def a-3-3 (cell (ack 3 3)))

;; Exeercise: Counting change
(defn first-denomination [kinds-of-coins]
  (cond (= kinds-of-coins 1) 1
        (= kinds-of-coins 2) 5
        (= kinds-of-coins 3) 10
        (= kinds-of-coins 4) 25
        (= kinds-of-coins 5) 50))

(defn cc [amount kinds-of-coins]
  (cond (= amount 0) 1
        (or (< amount 0) (= kinds-of-coins 0)) 0
        :else (+ (cc amount
                     (dec kinds-of-coins))
                 (cc (- amount (first-denomination kinds-of-coins))
                     kinds-of-coins))))

(defn count-change [amount]
  (cc amount 5))

(defc cc-100 (count-change 100))

;; Exercise 1.11
(defn f1 [n]
  (cond (< n 3) n
        :else (+ (f1 (- n 1))
                 (* 2 (f1 (- n 2)))
                 (* 3 (f1 (- n 3))))))

(defn f2-result [[n-1 n-2 n-3] count]
  (if (< count 3)
    count
    (+ n-1 (* 2 n-2) (* 3 n-3))))

(defn f2-iter [last-3 counter max-count]
  (let [result (f2-result last-3 counter)]
    (cond (= counter max-count) result 
          :else (f2-iter (take 3 (cons result last-3))
                         (inc counter)
                         max-count))))

(defn f2 [n]
  (f2-iter [0 0 0] 0 n))

(defc f2-0 (f2 0))
(defc f2-1 (f2 1))
(defc f2-5 (f2 5))
(defc f2-6 (f2 6))
(defc f2-9 (f2 9))
(defc f2-10 (f2 10))

(defc f1-0 (f1 0))
(defc f1-1 (f1 1))
(defc f1-2 (f1 2))
(defc f1-3 (f1 3))
(defc f1-4 (f1 4))
(defc f1-5 (f1 5))
(defc f1-6 (f1 6))
(defc f1-7 (f1 7))
(defc f1-8 (f1 8))
(defc f1-9 (f1 9))
(defc f1-10 (f1 10))


(html
  (head)
  (body
    (h1 "Exercise 1.9")
    (ul
      (li (text "Option 1:"))
      (li (pre (code "(define (+ a b)
  (if (= a 0)
    b
    (inc (+ (dec a) b))))")))
      (li (pre (code "(+ 3 3)")))
      (li (pre (code "(inc (+ 2 3))")))
      (li (pre (code "(inc (inc (+ 1 3)))")))
      (li (pre (code "(inc (inc (inc (+ 0 3))))")))
      (li (pre (code "(inc (inc (inc 3)))")))
      (li (pre (code "(inc (inc 4))")))
      (li (pre (code "(inc 5)")))
      (li (pre (code "6"))))
    (ul
      (li (text "Option 2:"))
      (li (pre (code "(define (+ a b)
  (if (= a 0)
    b
    (+ (dec a) (inc b))))")))
      (li (pre (code "(+ 3 3)")))
      (li (pre (code "(+ 2 4)")))
      (li (pre (code "(+ 1 5)")))
      (li (pre (code "(+ 0 6)")))
      (li (pre (code "6"))))

    (h1 "Exercise 1.10")
    (ul
      (li (text "Ackermann's function:"))
      (li (pre (code "(defn A [x y]
  (cond (= y 0) 0
        (= x 0) (* 2 y)
        (= y 1) 2
        :else (A (- x 1)
                 (A x (- y 1)))))")))
      (li (pre (code "(A 1 10)")))
      (li (pre (code "(A 0 (A 1 9))")))
      (li (pre (code "(* 2 (A 1 9))")))
      (li (pre (code "(* 2 (A 0 (A 1 8)))")))
      (li (pre (code "(* 2 (* 2 (A 1 8)))")))
      (li (pre (code "(* 2 (* 2 (A 0 (A 1 7))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (A 1 7))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (A 0 (A 1 6)))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (A 1 6)))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (A 0 (A 1 5))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (A 1 5))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 4)))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 4)))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 3))))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 3))))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 2)))))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 2)))))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 0 (A 1 1))))))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (A 1 1))))))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 2)))))))))")))
      (li (pre (code "=> 2^10 => ") a-1-10)))
    (hr)
    (ul
      (li (pre (code "(A 2 4)")))
      (li (pre (code "(A 1 (A 2 3))")))
      (li (pre (code "(A 1 (A 1 (A 2 2)))")))
      (li (pre (code "(A 1 (A 1 (A 1 (A 2 1))))")))
      (li (pre (code "(A 1 (A 1 (A 1 2)))")))
      (li (pre (code "(A 1 (A 1 (A 0 (A 1 1))))")))
      (li (pre (code "(A 1 (A 1 (* 2 (A 1 1))))")))
      (li (pre (code "(A 1 (A 1 (* 2 2)))")))
      (li (pre (code "(A 1 (A 1 4))")))
      (li (pre (code "(A 1 (A 0 (A 1 3)))")))
      (li (pre (code "(A 1 (A 0 (A 0 (A 1 2))))")))
      (li (pre (code "(A 1 (A 0 (A 0 (A 0 (A 1 1)))))")))
      (li (pre (code "(A 1 (A 0 (A 0 (A 0 2))))")))
      (li (pre (code "(A 1 (A 0 (A 0 (* 2 2))))")))
      (li (pre (code "(A 1 (A 0 (* 2 (* 2 2))))")))
      (li (pre (code "(A 1 (* 2 (* 2 (* 2 2))))")))
      (li (pre (code "(A 1 16)")))
      (li (pre (code "(A 0 (A 1 15))")))
      (li (pre (code "(A 0 (A 0 (A 1 14)))")))
      (li (pre (code "...")))
      (li (pre (code "(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))))))))")))
      (li (pre (code "(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))))))))")))
      (li (pre (code "(* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 (* 2 2)))))))))))))))")))
      (li (pre (code "=> 2^16 => ") a-2-4)))
    (hr)
    (ul
      (li (pre (code "(A 3 3)")))
      (li (pre (code "(A 2 (A 3 2))")))
      (li (pre (code "(A 2 (A 2 (A 3 1)))")))
      (li (pre (code "(A 2 (A 2 2))")))
      (li (pre (code "(A 2 (A 1 (A 2 1)))")))
      (li (pre (code "(A 2 (A 1 2))")))
      (li (pre (code "(A 2 (A 0 (A 1 1)))")))
      (li (pre (code "(A 2 (A 0 2))")))
      (li (pre (code "(A 2 (* 2 2))")))
      (li (pre (code "(A 2 4)")))
      (li (pre (code "(A 1 (A 2 3))")))
      (li (pre (code "(A 1 (A 1 (A 2 2)))")))
      (li (pre (code "(A 1 (A 1 (A 1 (A 2 1))))")))
      (li (pre (code "(A 1 (A 1 (A 1 2)))")))
      (li (pre (code "(A 1 (A 1 (A 0 (A 1 1))))")))
      (li (pre (code "(A 1 (A 1 (A 0 2)))")))
      (li (pre (code "(A 1 (A 1 (* 2 2)))")))
      (li (pre (code "(A 1 (A 1 4))")))
      (li (pre (code "(A 1 (A 0 (A 1 3)))")))
      (li (pre (code "(A 1 (A 0 (A 0 (A 1 2))))")))
      (li (pre (code "(A 1 (A 0 (A 0 (A 0 (A 1 1)))))")))
      (li (pre (code "(A 1 (A 0 (A 0 (A 0 2))))")))
      (li (pre (code "(A 1 (A 0 (A 0 (* 2 2))))")))
      (li (pre (code "(A 1 (A 0 (A 0 4)))")))
      (li (pre (code "(A 1 (* 2 (* 2 4)))")))
      (li (pre (code "(A 1 16)")))
      (li (pre (code "...")))      
      (li (pre (code "=> 2^16 => ") a-3-3)))
    (hr)
    (ul
      (li (pre (code "(define (f n) (A 0 n)) => f n => 2 * n")))
      (li (pre (code "(define (g n) (A 1 n)) => g n => 2^n")))
      (li (pre (code "(define (h n) (A 2 n)) => h n => 2^((2-1) * (2^n))"))))
    (h1 "Exercise: Counting change")
    (ul
      (li (pre (code "(count-change 100) => ") cc-100)))
    (h1 "Exercise: Counting change")
    (ul
      (li (pre (code "(f1 0) => ") f1-0))
      (li (pre (code "(f1 1) => ") f1-1))
      (li (pre (code "(f1 2) => ") f1-2))
      (li (pre (code "(f1 3) => ") f1-3))
      (li (pre (code "(f1 4) => ") f1-4))
      (li (pre (code "(f1 5) => ") f1-5))
      (li (pre (code "(f1 6) => ") f1-6))
      (li (pre (code "(f1 7) => ") f1-7))
      (li (pre (code "(f1 8) => ") f1-8))
      (li (pre (code "(f1 9) => ") f1-9))
      (li (pre (code "(f1 10) => ") f1-10))
      (li (pre (code "(f2 0) => ") f2-0))
      (li (pre (code "(f2 1) => ") f2-1))
      (li (pre (code "(f2 5) => ") f2-5))
      (li (pre (code "(f2 6) => ") f2-6))
      (li (pre (code "(f2 9) => ") f2-9))
      (li (pre (code "(f2 10) => ") f2-10)))))
