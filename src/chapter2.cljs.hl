(page "chapter2.html"
  (:require
   [javelin.core :refer [cell=]]
   [app.elements :refer [a-item]]
   [app.pair :as p]
   [app.point :refer [point-str]]
   [app.chapter2-1-1 :as c2-1-1]
   [app.chapter2-1-2 :as c2-1-2]
   [app.chapter2-1-3 :as c2-1-3]
   [app.chapter2-1-4 :as c2-1-4]
   [app.chapter2-2-1 :as c2-2-1]
   [app.chapter2-2-2 :as c2-2-2]
   [app.chapter2-2-3 :as c2-2-3]))

(js/jQuery #(c2-1-2/draw-ex-2-2))

(html
  (head
    (link :rel "stylesheet" :href "app.css"))
  (body
    (h1 "Chapter 2.1.1")
    (h2 "Exercise 2.1")
    (ul
      (a-item "(make-rat 1 2) = " @c2-1-1/make-rat-1-2)
      (a-item "(numer (make-rat -1 -2)) = " @c2-1-1/numer-rat-neg1-neg2)
      (a-item "(denom (make-rat -1 -2)) = " @c2-1-1/denom-rat-neg1-neg2)
      (a-item "(numer (make-rat 1 -2)) = " @c2-1-1/numer-rat-1-neg2)
      (a-item "(denom (make-rat 1 -2)) = " @c2-1-1/denom-rat-1-neg2))
    (hr)
    (h1 "Chapter 2.1.2")
    (h1 "Exercise 2.2")
    (ul
      (a-item "
(midpoint-segment 
 (make-segment 
  (make-point 10  60)
  (make-point 40 140))) = " (point-str @c2-1-2/midpoint-segment-1-2)))
    (canvas :id c2-1-2/canvas-id
      :height (:height c2-1-2/canvas-size)
      :width (:width c2-1-2/canvas-size))
    (h1 "Exercise 2.3")
    (ul
      (a-item "(perimeter  (make-rect (make-point 0 0) 10 20)) = " @c2-1-2/perimeter-10-20)
      (a-item "(area       (make-rect (make-point 0 0) 10 20)) = " @c2-1-2/area-10-20)
      (a-item "(perimeter2 (rect2/make-rect (make-point 0 0) 10 20)) = " @c2-1-2/perimeter2-10-20)
      (a-item "(area2      (rect2/make-rect (make-point 0 0) 10 20)) = " @c2-1-2/area2-10-20))
    (hr)
    (h1 "Chapter 2.1.3")
    (h2 "Exercise 2.4")
    (ul
      (a-item "(car1 (cons1 1 2)) = " @c2-1-3/car1-cons1-1-2)
      (a-item "(cdr1 (cons1 1 2)) = " @c2-1-3/cdr1-cons1-1-2)
      (a-item "(car2 (cons2 1 2)) = " @c2-1-3/car2-cons2-1-2)
      (a-item "(cdr2 (cons2 1 2)) = " @c2-1-3/cdr2-cons2-1-2)
      (a-item "
(car2 (cons2 1 2))
(car2 (fn [m] (m 1 2)))
((fn [m] (m 1 2)) (fn [p q] p))
((fn [p q] p) 1 2)
1"))
    (h2 "Exercise 2.5")
    (ul
      (a-item "(car3 (cons3 1 2)) = " @c2-1-3/car3-cons3-1-2)
      (a-item "(cdr3 (cons3 1 2)) = " @c2-1-3/cdr3-cons3-1-2))
    (h2 "Exercise 2.6")
    (ul
      (a-item "
(defn zero  [f] (fn [x] x))
(defn add-1 [n] (fn [f] (fn [x] (f ((n f) x)))))")
      (a-item "
(add-1 zero)
(fn [f] (fn [x] (f ((zero f) x))))
(fn [f] (fn [x] (f ((fn [x] x) x))))
(fn [f] (fn [x] (f x)))
(defn one [f] (fn [x] (f x)))")
      (a-item "
(add-1 one)
(fn [f] (fn [x] (f ((one f) x))))
(fn [f] (fn [x] (f ((fn [x] (f x)) x))))
(fn [f] (fn [x] (f (f x))))
(defn two [f] (fn [x] (f (f x))))")
      (a-item "((zero inc) 0) = " @c2-1-3/zero-inc-0)
      (a-item "((one inc) 0) =  " @c2-1-3/one-inc-0)
      (a-item "((two inc) 0) =  " @c2-1-3/two-inc-0)
      (a-item "(((add-1 two) inc) 0) = " @c2-1-3/add-1-two-inc-0))
    (hr)
    (h1 "Chapter 2.1.4")
    (h2 "Exercise 2.7")
    (ul
      (a-item "(upper-bound (make-interval 1 2)) = " @c2-1-4/upper-bound-1-2)
      (a-item "(lower-bound (make-interval 1 2)) = " @c2-1-4/lower-bound-1-2))
    (h2 "Exercise 2.8")
    (ul
      (a-item "(sub-interval (make-interval -10 -1) (make-interval 100 1000)) = " @c2-1-4/sub-interval1)
      (a-item "(sub-interval (make-interval 100 1000) (make-interval -10 -1)) = " @c2-1-4/sub-interval2)
      (a-item "(sub-interval (make-interval 100 1000) (make-interval 1 2)) = " @c2-1-4/sub-interval3))
    (h2 "Exercise 2.9")
    (ul
      (a-item "(width-interval (make-interval -10 -1)) = " @c2-1-4/width1a)
      (a-item "(width-interval (make-interval 100 1000)) = " @c2-1-4/width1b)
      (a-item "
(width-interval 
 (sub-interval
  (make-interval -10 -1)
  (make-interval 100 1000))) = " @c2-1-4/width1s)
      (a-item "
(width-interval
 (sub-interval
  (make-interval 100 1000)
  (make-interval -10 -1))) = " @c2-1-4/width2s)
      (a-item "(width-interval (make-interval 100 1000)) = " @c2-1-4/width3a)
      (a-item "(width-interval (make-interval 1 2)) = " @c2-1-4/width3b)
      (a-item "
(width-interval
 (sub-interval
  (make-interval 100 1000)
  (make-interval 1 2))) = " @c2-1-4/width3s)
      (a-item "(width-interval (make-interval -10 -1)) = " @c2-1-4/width-m1a)
      (a-item "(width-interval (make-interval 100 1000)) = " @c2-1-4/width-m1b)
      (a-item "
(width-interval
 (mul-interval
  (make-interval -10 -1)
  (make-interval 100 1000))) = " @c2-1-4/width-m1)
      (a-item "
(width-interval 
 (mul-interval
  (make-interval 100 1000)
  (make-interval -10 -1))) = " @c2-1-4/width-m2)
      (a-item "(width-interval (make-interval 100 1000)) = " @c2-1-4/width-m3a)
      (a-item "(width-interval (make-interval 1 2)) = " @c2-1-4/width-m3b)
      (a-item "
(width-interval
 (mul-interval
  (make-interval 100 1000)
  (make-interval 1 2))) = " @c2-1-4/width-m3))
    (h2 "Exercise 2.11")
    (ul
      (a-item "
(mul-interval (make-interval -10 -1)
              (make-interval 100 1000)) = " @c2-1-4/mul1-1)
      (a-item "
(mul-interval (make-interval 100 1000)
              (make-interval -10 -1)) = " @c2-1-4/mul1-2)
      (a-item "
(mul-interval (make-interval 100 1000)
              (make-interval 1 2)) = " @c2-1-4/mul1-3)
      (a-item "
(mul-interval2 (make-interval -10 -1)
               (make-interval 100 1000)) = " @c2-1-4/mul2-1)
      (a-item "
(mul-interval2 (make-interval 100 1000)
               (make-interval -10 -1)) = " @c2-1-4/mul2-2)
      (a-item "
(mul-interval2 (make-interval 100 1000)
               (make-interval 1 2)) = " @c2-1-4/mul2-3))
    (h2 "Exercise 2.12")
    (ul
      (a-item "(make-center-percent 5 0.1) = " @c2-1-4/mcp-5-10))
    (hr)
    (h1 "Chapter 2.2.1")
    (h2 "Exercise 2.17")
    (ul
      (a-item "(last-pair (list 1 2 3)) = " @c2-2-1/last-pair-list-123))
    (h2 "Exercise 2.18")
    (ul
      (a-item "(reverse (list 1 2 3)) = " @c2-2-1/reverse-list-123))
    (h2 "Exercise 2.19")
    (ul
      (a-item "(cc 100 us-coins) = " @c2-2-1/cc-100-us-coins))
    (h2 "Exercise 2.20")
    (ul
      (a-item "(same-parity 1 2 3 4 5 6 7) = " (str @c2-2-1/same-parity-odd))
      (a-item "(same-parity 2 3 4 5 6 7) = " (str @c2-2-1/same-parity-even)))
    (h2 "Exercise 2.21")
    (ul
      (a-item "(square-list1 (list' 1 2 3 4)) = " @c2-2-1/sq-list1-1234)
      (a-item "(square-list2 (list' 1 2 3 4)) = " @c2-2-1/sq-list2-1234))
    (h2 "Exercise 2.22")
    (ul
      (li "The first example builds the list from right to left.")
      (li "The second example attemps to cons a list onto an atom.")
      (a-item "(square-list3 (list' 1 2 3 4)) = " @c2-2-1/sq-list3-1234))
    (h2 "Exercise 2.23")
    (ul
      (a-item "(for-each println (list' 1 2 3 4))")
      (a-item ";; => 1")
      (a-item ";; => 2")
      (a-item ";; => 3")
      (a-item ";; => 4")
      (a-item "true"))
    (h2 "Exercise 2.24")
    (ul
      (a-item "
(list' 1 (list' 2 (list' 3 4)))

 /\\
1 /\\
 2 /\\
  3 /\\
   4  nil"))
    (h1 "Chapter 2.2.2")
    (h2 "Exercise 2.25")
    (ul
      (a-item "(car' (cdr' (cdr' (cdr' (list' 1 3 (list' 5 7) 9))))) = " @c2-2-2/seven1)
      (a-item "(car' (car' (list' (list' 7)))) = " @c2-2-2/seven2)
      (a-item "
(car'                
 (cdr'
  (car'
   (cdr'
    (car'
     (cdr'
      (car'
       (cdr'
        (car'
         (cdr'
          (car'
           (cdr' (list' 1 (list' 2 (list' 3 (list' 4 (list' 5 (list' 6 7)))))))))))))))))) =  " @c2-2-2/seven3))
    (h2 "Exercise 2.26")
    (ul
      (a-item "
(def x (list' 1 2 3))
(def y (list' 4 5 6))")
      (a-item "
(append x y) = " @c2-2-2/append-lists)
      (a-item "
(cons' x y) = " @c2-2-2/cons-lists)
      (a-item "
(list' x y) = " @c2-2-2/list-lists))
    (h2 "Exercise 2.27")
    (ul
      (a-item "(deep-reverse (list' (list' 1 2) (list' 3 4))) = " @c2-2-2/deep-reverse-12-34))
    (h2 "Exercise 2.28")
    (ul
      (a-item "(fringe (list' (list' 1 (list' 2 3) 4) (list' 5 6))) = " @c2-2-2/fringe-1-6))
    (h2 "Exercise 2.29")
    (ul
      (a-item "
(total-weight (make-mobile
               (make-branch 1 (make-mobile
                               (make-branch 2 20)
                               (make-branch 3 30)))
               (make-branch 4 (make-mobile
                               (make-branch 5 50)
                               (make-branch 6 (make-mobile
                                               (make-branch 7 70)
                                               (make-branch 8 80))))))) = " @c2-2-2/total-weight-mobile)
      (a-item "
(balanced (make-mobile 
           (make-branch 1 4) 
           (make-branch 1 (make-mobile 
                           (make-branch 2 2) 
                           (make-branch 2 2))))) = " @c2-2-2/balanced-mobile-14-22-22))
    (h2 "Exercise 2.30")
    (ul
      (a-item "
(def tree (list' 1 (list' 2 (list' 3 4) 5) (list' 6 7)))
(square-tree tree) = " @c2-2-2/square-a-tree)
      (a-item "
(sqaure-tree-map tree) = " @c2-2-2/square-map-a-tree))
    (h2 "Exercise 2.31")
    (ul
      (a-item "
(square-tree-map' tree) = " @c2-2-2/square-map2-a-tree))
    (h2 "Exercise 2.32")
    (ul
      (a-item "(subsets (list' 1 2 3)) = " @c2-2-2/subsets-123))
    (h1 "Chapter 2.2.3")
    (h2 "Exercise 2.33")
    (ul
      (a-item "(map-accumulate sq (list' 1 2 3 4 5)) = " (cell= c2-2-3/map-accumulate-sq))
      (a-item "(append-accumulate (list' 1 2) (list' 3 4)) = " (cell= c2-2-3/append-accumulate-12-34))
      (a-item "(length-accumulate (list' 1 3 4 2 1)) = " (cell= c2-2-3/length-accumulate-5)))
    (h2 "Exercise 2.34")
    (ul
      (a-item "(horner-eval 2 (list' 1 3 0 5 0 1)) = " (cell= c2-2-3/horner-eval-130501)))
    (h2 "Exercise 2.35")
    (ul
      (a-item "(count-leaves (list' 1 (list' 2 3) 4)) = " (cell= c2-2-3/count-leaves-4)))
    (h2 "Exercise 2.36")
    (ul
      (a-item "
(def seq-seqs (list' (list' 1 2 3) (list' 4 5 6) (list' 7 8 9) (list' 10 11 12)))
(accumulate-n + 0 seq-seqs) = " (cell= c2-2-3/accumulate-n-seq-seqs)))
    (h2 "Exercise 2.37")
    (ul
      (a-item "(dot-product (list' 1 2 3) (list' 4 5 6)) = " (cell= c2-2-3/dot-product-123-456))
      (a-item "
(list' (list' 1 2 3 4) (list' 5 6 7 8) (list' 9 10 11 12))
(matrix-*-vector matrix (list' 2 3 4 5)) = " (cell= c2-2-3/m-by-v))
      (a-item "(transpose matrix) = " (cell= c2-2-3/transpose-matrix))
      (a-item "(matrix-*-matrix matrix matrix) = " (cell= c2-2-3/m-by-m)))
    (h2 "Exercise 2.38")
    (ul
      (a-item "(fold-right / 1 (list' 1 2 3)) = " (cell= c2-2-3/fr-d-1-123))
      (a-item "(fold-left / 1 (list' 1 2 3)) = " (cell= c2-2-3/fl-d-1-123))
      (a-item "(fold-right list' nil (list' 1 2 3)) = " (cell= c2-2-3/fr-l-nil-123))
      (a-item "(fold-left list' nil (list' 1 2 3)) = " (cell= c2-2-3/fl-l-nil-123)))
    (h2 "Exercise 2.39")
    (ul
      (a-item "(rev-fr (list' 1 2 3)) = " (cell= c2-2-3/rev-fr-123))
      (a-item "(rev-fl (list' 1 2 3)) = " (cell= c2-2-3/rev-fl-123)))
    (h2 "Exercise 2.40")
    (ul
      (a-item "(unique-pairs 3) = " (cell= c2-2-3/unique-pairs-3))
      (a-item "(prime-sum-pairs 6) = " (cell= c2-2-3/prime-sum-pairs-6))
      (a-item "(prime-sum-pairs2 6) = " (cell= c2-2-3/prime-sum-pairs2-6)))
    (h2 "Exercise 2.41")
    (ul
      (a-item "(ordered-triples 6 12) = " (cell= c2-2-3/ordered-triples-6-12)))))
